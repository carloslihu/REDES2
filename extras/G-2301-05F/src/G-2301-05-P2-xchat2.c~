#include <redes2/ircxchat.h>
#include "../includes/G-2301-05-P1-socket.h"
#include "../includes/G-2301-05-P1-tools.h"
#include "../includes/G-2301-05-P1-types.h"
#include "../includes/G-2301-05-P1-commands.h"
#include "../includes/G-2301-05-P2-userCommands.h"

struct clientArgs {
    int socket;
};
typedef long int (*pFuncs)();
typedef long int (*pUserFuncs)(int socket, char* strin);
pFuncs functs[100];
pUserFuncs userFuncts[10000];
int sockfd;
char* miNick;

long int clientPong() {
    char* command;
    command = calloc(30, sizeof (char));
    snprintf(command, 30, "PONG %s", CLIENTNAME);
    printf("%s\n", command);
    if (send(sockfd, "PONG JohnTitor", strlen("PONG JohnTitor"), 0) == -1)
        return logIntError(-1, "Error @ IRCInterface_Connect -> send");
    free(command);
    return IRC_OK;
}
/** 
 * @defgroup IRCInterface Interface
 *
 */

/** 
 * @defgroup IRCInterfaceCallbacks Callbaks
 * @ingroup IRCInterface
 *
 */

/** 
 * @addtogroup IRCInterfaceCallbacks
 * Funciones que van a ser llamadas desde el interface y que deben ser implementadas por el usuario.
 * Todas estas funciones pertenecen al hilo del interfaz.
 *
 * El programador puede, por supuesto, separar todas estas funciones en múltiples ficheros a
 * efectos de desarrollo y modularización.
 *
 * <hr>
 */

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateChannelKey IRCInterface_ActivateChannelKey
 *
 * @brief Llamada por el botón de activación de la clave del canal.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateChannelKey (char *channel, char * key)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación de la clave del canal. El segundo parámetro es
 * la clave del canal que se desea poner. Si es NULL deberá impedirse la activación
 * con la función implementada a tal efecto. En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se va a activar la clave.
 * @param[in] key clave para el canal indicado.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateChannelKey(char *channel, char *key) {
    char* command = NULL;
    if (key) {
        if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+k", key) != IRC_OK)
            logVoidError("IRCInterface_ActivateChannelKey -> IRCMsg_Mode");
        if (send(sockfd, command, strlen(command), 0) == -1)
            logVoidError("IRCInterface_ActivateChannelKey -> send");
        free(command);
    }
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateExternalMessages IRCInterface_ActivateExternalMessages
 *
 * @brief Llamada por el botón de activación de la recepción de mensajes externos.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateExternalMessages (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación de la recepción de mensajes externos.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se activará la recepción de mensajes externos.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateExternalMessages(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-n", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivateExternalMessages -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateExternalMessages -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateInvite IRCInterface_ActivateInvite
 *
 * @brief Llamada por el botón de activación de canal de sólo invitación.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateInvite (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación de canal de sólo invitación.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se activará la invitación.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateInvite(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+i", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivateInvite -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateInvite -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateModerated IRCInterface_ActivateModerated
 *
 * @brief Llamada por el botón de activación de la moderación del canal.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateModerated (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación de la moderación del canal.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se activará la moderación.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateModerated(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+m", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivateModerated -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateModerated -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateNicksLimit IRCInterface_ActivateNicksLimit
 *
 * @brief Llamada por el botón de activación del límite de usuarios en el canal.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateNicksLimit (char *channel, int * limit)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación del límite de usuarios en el canal. El segundo es el
 * límite de usuarios que se desea poner. Si el valor es 0 se sobrentiende que se desea eliminar
 * este límite.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se activará el límite de usuarios.
 * @param[in] limit límite de usuarios en el canal indicado.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateNicksLimit(char *channel, int limit) {
    char* command = NULL;
    char limite[20];

    snprintf(limite, 20, "%d", limit);
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+l", limite) != IRC_OK)
        logVoidError("IRCInterface_ActivateNicksLimit -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateNicksLimit -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivatePrivate IRCInterface_ActivatePrivate
 *
 * @brief Llamada por el botón de activación del modo privado.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivatePrivate (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación del modo privado.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a activar la privacidad.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivatePrivate(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+p", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivatePrivate -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivatePrivate -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateProtectTopic IRCInterface_ActivateProtectTopic
 *
 * @brief Llamada por el botón de activación de la protección de tópico.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateProtectTopic (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación de la protección de tópico.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a activar la protección de tópico.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateProtectTopic(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+t", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivateProtectTopic -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateProtectTopic -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ActivateSecret IRCInterface_ActivateSecret
 *
 * @brief Llamada por el botón de activación de canal secreto.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ActivateSecret (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de activación de canal secreto.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a activar el estado de secreto.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_ActivateSecret(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+s", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivateSecret -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateSecret -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_BanNick IRCInterface_BanNick
 *
 * @brief Llamada por el botón "Banear".
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_BanNick (char *channel, char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Banear". Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se va a realizar el baneo. En principio es un valor innecesario.
 * @param[in] nick nick del usuario que va a ser baneado
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_BanNick(char *channel, char *nick) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+b", nick) != IRC_OK)
        logVoidError("IRCInterface_BanNick -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_BanNick -> send");
    free(command);

}

void* clientThread(void* args) {
    functs[34] = clientPong;
    int byteCount;
    char* command = NULL;
    char buffer[10000];
    char *strPos;
    long int commandNumber;

    if (args == NULL)
        return logPointerError(NULL, "error @ clientRoutine: NULL pointer argument");
    struct clientArgs* aux = (struct clientArgs*) args;
    int sockfd = aux->socket;
    while (1) {
        bzero(buffer, 10000);
        byteCount = recv(sockfd, buffer, 10000, 0);
        //printf("%s\n", buffer);
        if (byteCount == 0)
            return logPointerError(NULL, "retrieveMsg exited");
        else if (byteCount == -1)
            return logPointerError(NULL, "error @ retrieveMsg -> recv");

        strPos = buffer;
        while (strPos != NULL) {
            strPos = IRC_UnPipelineCommands(strPos, &command);
            IRCInterface_WriteSystemThread(NULL, command);
            if (command != NULL) {
                commandNumber = IRC_CommandQuery(command);

                if (commandNumber != 34) {
                    //if (commandDefault(sockfd, command) != IRC_OK)
                    printf("comando: %ld\n", commandNumber);
                    //return logPointerError(NULL, "error @ retrieveMsg -> commandUnknown");

                } else if (functs[commandNumber]() != IRC_OK)//funcion que actua al mensaje de un servidor
                    return logPointerError(NULL, "error @ retrieveMsg -> pFuncs");
            }
            IRC_MFree(1, &command);
        }
    }
    return NULL;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_Connect IRCInterface_Connect
 *
 * @brief Llamada por los distintos botones de conexión.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	long IRCInterface_Connect (char *nick, char * user, char * realname, char * password, char * server, int port, boolean ssl)
 * @endcode
 * 
 * @description 
 * Función a implementar por el programador.
 * Llamada por los distintos botones de conexión. Si implementará la comunicación completa, incluido
 * el registro del usuario en el servidor.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leída.
 *
 *
 * @param[in] nick nick con el que se va a realizar la conexíón.
 * @param[in] user usuario con el que se va a realizar la conexión.
 * @param[in] realname nombre real con el que se va a realizar la conexión.
 * @param[in] password password del usuario si es necesaria, puede valer NULL.
 * @param[in] server nombre o ip del servidor con el que se va a realizar la conexión.
 * @param[in] port puerto del servidor con el que se va a realizar la conexión.
 * @param[in] ssl puede ser TRUE si la conexión tiene que ser segura y FALSE si no es así.
 *
 * @retval IRC_OK si todo ha sido correcto (debe devolverlo).
 * @retval IRCERR_NOSSL si el valor de SSL es TRUE y no se puede activar la conexión SSL pero sí una 
 * conexión no protegida (debe devolverlo).
 * @retval IRCERR_NOCONNECT en caso de que no se pueda realizar la comunicación (debe devolverlo).
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */
long IRCInterface_Connect(char *nick, char *user, char *realname, char *password, char *server, int port, boolean ssl) {
    pthread_t th;
    struct clientArgs *args = NULL;
    long ret = 0;
    char* command, *prefix; //buffer[512];


    /*Creo socket*/
    sockfd = openSocket_TCP();
    if (connectTo(sockfd, server, port) == -1)
        return logIntError(-1, "Error @ IRCInterface_Connect -> connectTo");
    args = (struct clientArgs*) malloc(sizeof (struct clientArgs));
    if (args == NULL)
        return logIntError(1, "error @ IRCInterface_Connect -> malloc");

    //mando nick y user
    prefix = CLIENTNAME;
    if ((ret = IRCMsg_Nick(&command, prefix, nick, NULL)) != IRC_OK)
        return logIntError(ret, "Error @ IRCInterface_Connect -> IRCMsg_Nick");
    printf("%s\n", command);
    if (send(sockfd, command, strlen(command), 0) == -1)
        return logIntError(-1, "Error @ IRCInterface_Connect -> send");
    free(command);
    if ((ret = IRCMsg_User(&command, prefix, user, "o", realname)) != IRC_OK)
        return logIntError(ret, "Error @ IRCInterface_Connect -> IRCMsg_User");
    printf("%s\n", command);
    if (send(sockfd, command, strlen(command), 0) == -1)
        return logIntError(-1, "Error @ IRCInterface_Connect -> send");
    printf("%s\n", command);
    free(command);

    args->socket = sockfd;
    pthread_create(&th, NULL, &clientThread, args); //este hilo se encargará de recibir los mensajes posteriores del servidor

    //TODO msg
    //DEBUG:>> SERVER: NICK yoda
    //DEBUG:>> SERVER: USER yoda * * :yoda
    /*if (recv(sockfd, (char*) buffer, 511, 0) <= 0)
        return logIntError(-1, "Error @ IRCInterface_Connect -> recv");
    //el "comando" 001 es efectivamente RPL_WELCOME (que en decimal es 183)
    ret = IRC_CommandQuery(buffer);
    printf("%ld\n",ret);
    if (ret == RPL_WELCOME) {
        args->socket = sockfd;
        pthread_create(&th, NULL, &clientThread, args); //este hilo se encargará de recibir los mensajes posteriores del servidor
    } else {
        printf("Me cago\n");*/

    /*
    //README debemos esperar a que el servidor nos confirme la conexion
        if(recv(sockfd, (char*) buffer, 511, 0) <= 0)
                return logIntError(-1, "Error @ IRCInterface_Connect -> recv");
        //el "comando" 001 es efectivamente RPL_WELCOME (que en decimal es 183)
        ret = IRC_CommandQuery(buffer);

        if(ret == RPL_WELCOME){
            args->socket = sockfd;
            pthread_create(&th, NULL, &clientThread, args);//este hilo se encargará de recibir los mensajes posteriores del servidor
        }
     */
    /*
    README
    si el connect&register del servidor nos responde con un error, xchat haría lo siguiente:
    se abriría la ventana de la interfaz normal PERO no estaría conectado a un servidor
    el usuario tendría que conectar "/server <servername>" para tratar de conectarse al server de nombre <servername>
    automaticamente, el cliente lanzara los comandos NICK y USER con los nickname y username introducidos antes (en la primera
    conexcion no exitosa)
    de nuevo, si no se recibe una respuesta o si se recibe respuesta de fracaso, se tendría que volver a lanzar el comando server

    Lo que nosotros podemos hacer en caso de error es:
    iniciar la interfaz principal pero no estando conectados a ningun sitio. Si el usuario escribe "/server" volver a llamar a
    esta función (?) y así el usuario podría intentar volver a conectarse.
     */
    return IRC_OK;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateChannelKey IRCInterface_DeactivateChannelKey
 *
 * @brief Llamada por el botón de desactivación de la clave del canal.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateChannelKey (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación de la clave del canal.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a desactivar la clave.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateChannelKey(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-k", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivateChannelKey -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivateChannelKey -> send");
    free(command);

}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateExternalMessages IRCInterface_DeactivateExternalMessages
 *
 * @brief Llamada por el botón de desactivación de la recepción de mensajes externos.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateExternalMessages (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación de la recepción de mensajes externos.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a deactivar la recepción de mensajes externos.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateExternalMessages(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+n", NULL) != IRC_OK)
        logVoidError("IRCInterface_ActivateExternalMessages -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_ActivateExternalMessages -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateInvite IRCInterface_DeactivateInvite
 *
 * @brief Llamada por el botón de desactivación de canal de sólo invitación.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateInvite (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación de canal de sólo invitación.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a desactivar la invitación.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateInvite(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-i", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivateInvite -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivateInvite -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateModerated IRCInterface_DeactivateModerated
 *
 * @brief Llamada por el botón de desactivación  de la moderación del canal.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateModerated (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación  de la moderación del canal.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a desactivar la moderación.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateModerated(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-m", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivateModerated -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivateModerated -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateNicksLimit IRCInterface_DeactivateNicksLimit
 *
 * @brief Llamada por el botón de desactivación de la protección de tópico.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateNicksLimit (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación  del límite de usuarios en el canal.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a desactivar el límite de usuarios.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateNicksLimit(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-l", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivateNicksLimit -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivateNicksLimit -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivatePrivate IRCInterface_DeactivatePrivate
 *
 * @brief Llamada por el botón de desactivación del modo privado.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivatePrivate (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación del modo privado.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @param[in] channel canal sobre el que se va a desactivar la privacidad.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivatePrivate(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-p", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivatePrivate -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivatePrivate -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateProtectTopic IRCInterface_DeactivateProtectTopic
 *
 * @brief Llamada por el botón de desactivación de la protección de tópico.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateProtectTopic (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación de la protección de tópico.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a desactivar la protección de tópico.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateProtectTopic(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-t", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivateProtectTopic -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivateProtectTopic -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DeactivateSecret IRCInterface_DeactivateSecret
 *
 * @brief Llamada por el botón de desactivación de canal secreto.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DeactivateSecret (char *channel)
 * @endcode
 * 
 * @description 
 * Llamada por el botón de desactivación de canal secreto.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] channel canal sobre el que se va a desactivar la propiedad de canal secreto.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_DeactivateSecret(char *channel) {
    char* command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-s", NULL) != IRC_OK)
        logVoidError("IRCInterface_DeactivateSecret -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DeactivateSecret -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_DisconnectServer IRCInterface_DisconnectServer
 *
 * @brief Llamada por los distintos botones de desconexión.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_DisconnectServer (char * server, int port)
 * @endcode
 * 
 * @description 
 * Llamada por los distintos botones de desconexión. Debe cerrar la conexión con el servidor.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.

 * @param[in] server nombre o ip del servidor del que se va a realizar la desconexión.
 * @param[in] port puerto sobre el que se va a realizar la desconexión.
 *
 * @retval TRUE si se ha cerrado la conexión (debe devolverlo).
 * @retval FALSE en caso contrario (debe devolverlo).
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

boolean IRCInterface_DisconnectServer(char *server, int port) {
    char* command = NULL;
    /*if (IRCMsg_Quit(&command, CLIENTNAME, NULL) != IRC_OK)
        logVoidError("IRCInterface_DisconnectServer -> IRCMsg_Quit");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_DisconnectServer -> send");*/
    free(command);
    return TRUE;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_ExitAudioChat IRCInterface_ExitAudioChat
 *
 * @brief Llamada por el botón "Cancelar" del diálogo de chat de voz.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_ExitAudioChat (char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Parar" del diálogo de chat de voz. Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario. Esta función cierrala comunicación. Evidentemente tiene que
 * actuar sobre el hilo de chat de voz.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] nick nick del usuario que solicita la parada del chat de audio.
 *
 * @retval TRUE si se ha cerrado la comunicación (debe devolverlo).
 * @retval FALSE en caso contrario (debe devolverlo).
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

boolean IRCInterface_ExitAudioChat(char *nick) {
    return TRUE;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_GiveOp IRCInterface_GiveOp
 *
 * @brief Llamada por el botón "Op".
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_GiveOp (char *channel, char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Op". Previamente debe seleccionarse un nick del
 * canal para darle "op" a dicho usuario.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se va dar op al usuario.
 * @param[in] nick nick al que se le va a dar el nivel de op.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_GiveOp(char *channel, char *nick) {
    char*command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "+o", nick) != IRC_OK)
        logVoidError("IRCInterface_GiveOp -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_GiveOp -> send");
    free(command);

}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_GiveVoice IRCInterface_GiveVoice
 *
 * @brief Llamada por el botón "Dar voz".
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_GiveVoice (char *channel, char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Dar voz". Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se va dar voz al usuario.
 * @param[in] nick nick al que se le va a dar voz.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_GiveVoice(char *channel, char *nick) {
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_KickNick IRCInterface_KickNick
 *
 * @brief Llamada por el botón "Echar".
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_KickNick (char *channel, char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Echar". Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se va a expulsar al usuario.
 * @param[in] nick nick del usuario que va a ser expulsado.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_KickNick(char *channel, char *nick) {
    char *command;
    if (channel == NULL || nick == NULL) return;
    if (IRCMsg_Kick(&command, CLIENTNAME, channel, nick, "has sido kickeado!") != IRC_OK) {
        logVoidError("error @ IRCInterface_KickNick -> IRCMsg_kick");
        return;
    }
    if (send(sockfd, command, strlen(command), 0) < 0)
        logVoidError("error @ IRCInterface_KickNick -> send");
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_NewCommandText IRCInterface_NewCommandText
 *
 * @brief Llamada la tecla ENTER en el campo de texto y comandos.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_NewCommandText (char *command)
 * @endcode
 * 
 * @description
 * Llamada de la tecla ENTER en el campo de texto y comandos. El texto deberá ser
 * enviado y el comando procesado por las funciones de "parseo" de comandos de
 * usuario.
 *
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] comando introducido por el usuario.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_NewCommandText(char *command) {
    char* target, *prefix; //punteros que no hay que liberar
    //int socket;
    long ret;
    char *Xcom, *msg; //punteros que si hay que liberar
    Xcom = msg = NULL;
    userFuncts[UJOIN] = userJoin;
    prefix = CLIENTNAME;

    if (command[0] != '/') {//significa que el usuario queria enviar un privmsg
        target = IRCInterface_ActiveChannelName();
        if ((ret = IRCMsg_Privmsg(&Xcom, prefix, target, command)) != IRC_OK)
            return logVoidError("error @ IRCInterface_NewCommandText -> IRCMsg_Privmsg");
        send(sockfd, Xcom, strlen(Xcom), 0);
    } else { //significa que el usuario quería enviar un comando
        if ((ret = IRCUser_CommandQuery(command)) < 0) {
            //TODO caso de comando erroneo
        } else {
            if (ret == UJOIN){
                userFuncts[UJOIN](sockfd,command);
                
            }
            //TODO caso de comando valido
            //llamamos a pfunc[ret] y si no da error continuamos
            //llamamos a send y si no da error continuamos
        }
    }
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_NewTopicEnter IRCInterface_NewTopicEnter
 *
 * @brief Llamada cuando se pulsa la tecla ENTER en el campo de tópico.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_NewTopicEnter (char * topicdata)
 * @endcode
 * 
 * @description 
 * Llamada cuando se pulsa la tecla ENTER en el campo de tópico.
 * Deberá intentarse cambiar el tópico del canal.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * param[in] topicdata string con el tópico que se desea poner en el canal.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_NewTopicEnter(char *topicdata) {
    char *command, *prefix, *channel;
    if (topicdata == NULL) return;
    prefix = CLIENTNAME;
    channel = IRCInterface_ActiveChannelName();
    if (channel == NULL) {
        logVoidError("error @ IRCInterface_NewTopicEnter -> IRCInterface_ActiveChannelName");
        return;
    }
    if (IRCMsg_Topic(&command, prefix, channel, topicdata) != IRC_OK) {
        logVoidError("error @ IRCInterface_NewTopicEnter -> IRCMsg_Topic");
        return;
    }
    if (send(sockfd, command, strlen(command), 0) < 0)
        logVoidError("error @ IRCInterface_NewTopicEnter -> send");
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_SendFile IRCInterface_SendFile
 *
 * @brief Llamada por el botón "Enviar Archivo".
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_SendFile (char * filename, char *nick, char *data, long unsigned int length)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Enviar Archivo". Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario. Esta función como todos los demás callbacks bloquea el interface
 * y por tanto es el programador el que debe determinar si crea un nuevo hilo para enviar el archivo o
 * no lo hace.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] filename nombre del fichero a enviar.
 * @param[in] nick nick del usuario que enviará el fichero.
 * @param[in] data datos a ser enviados.
 * @param[in] length longitud de los datos a ser enviados.
 *
 * @retval TRUE si se ha establecido la comunicación (debe devolverlo).
 * @retval FALSE en caso contrario (debe devolverlo).
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

boolean IRCInterface_SendFile(char *filename, char *nick, char *data, long unsigned int length) {
    return TRUE;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_StartAudioChat IRCInterface_StartAudioChat
 *
 * @brief Llamada por el botón "Iniciar" del diálogo de chat de voz.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_StartAudioChat (char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Iniciar" del diálogo de chat de voz. Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario. Esta función como todos los demás callbacks bloquea el interface
 * y por tanto para mantener la funcionalidad del chat de voz es imprescindible crear un hilo a efectos
 * de comunicación de voz.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] nick nick del usuario con el que se desea conectar.
 *
 * @retval TRUE si se ha establecido la comunicación (debe devolverlo).
 * @retval FALSE en caso contrario (debe devolverlo).
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

boolean IRCInterface_StartAudioChat(char *nick) {
    return TRUE;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_StopAudioChat IRCInterface_StopAudioChat
 *
 * @brief Llamada por el botón "Parar" del diálogo de chat de voz.
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_StopAudioChat (char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Parar" del diálogo de chat de voz. Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario. Esta función sólo para la comunicación que puede ser reiniciada. 
 * Evidentemente tiene que actuar sobre el hilo de chat de voz.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * La string recibida no debe ser manipulada por el programador, sólo leída.
 *
 * @param[in] nick nick del usuario con el que se quiere parar el chat de voz.
 *
 * @retval TRUE si se ha parado la comunicación (debe devolverlo).
 * @retval FALSE en caso contrario (debe devolverlo).
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

boolean IRCInterface_StopAudioChat(char *nick) {
    return TRUE;
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_TakeOp IRCInterface_TakeOp
 *
 * @brief Llamada por el botón "Quitar Op". 
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_TakeOp (char *channel, char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Quitar Op". Previamente debe seleccionarse un nick del
 * canal para quitarle "op" a dicho usuario.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se va a quitar op al usuario.
 * @param[in] nick nick del usuario al que se le va a quitar op.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_TakeOp(char *channel, char *nick) {
    char*command = NULL;
    if (IRCMsg_Mode(&command, CLIENTNAME, channel, "-o", nick) != IRC_OK)
        logVoidError("IRCInterface_TakeOp -> IRCMsg_Mode");
    if (send(sockfd, command, strlen(command), 0) == -1)
        logVoidError("IRCInterface_TakeOp -> send");
    free(command);
}

/**
 * @ingroup IRCInterfaceCallbacks
 *
 * @page IRCInterface_TakeVoice IRCInterface_TakeVoice
 *
 * @brief Llamada por el botón "Quitar voz". 
 *
 * @synopsis
 * @code
 *	#include <redes2/ircxchat.h>
 *
 * 	void IRCInterface_TakeVoice (char *channel, char *nick)
 * @endcode
 * 
 * @description 
 * Llamada por el botón "Quitar voz". Previamente debe seleccionarse un nick del
 * canal para darle voz a dicho usuario.
 * 
 * En cualquier caso sólo se puede realizar si el servidor acepta la orden.
 * Las strings recibidas no deben ser manipuladas por el programador, sólo leídas.
 *
 * @param[in] channel canal sobre el que se le va a quitar voz al usuario.
 * @param[in] nick nick del usuario al que se va a quitar la voz.
 *
 * @warning Esta función debe ser implementada por el alumno.
 *
 * @author
 * Eloy Anguiano (eloy.anguiano@uam.es)
 *
 *<hr>
 */

void IRCInterface_TakeVoice(char *channel, char *nick) {
}


/***************************************************************************************************/
/***************************************************************************************************/
/**                                                                                               **/
/** MMMMMMMMMM               MMMMM           AAAAAAA           IIIIIII NNNNNNNNNN          NNNNNN **/
/**  MMMMMMMMMM             MMMMM            AAAAAAAA           IIIII   NNNNNNNNNN          NNNN  **/
/**   MMMMM MMMM           MM MM            AAAAA   AA           III     NNNNN NNNN          NN   **/
/**   MMMMM  MMMM         MM  MM            AAAAA   AA           III     NNNNN  NNNN         NN   **/
/**   MMMMM   MMMM       MM   MM           AAAAA     AA          III     NNNNN   NNNN        NN   **/
/**   MMMMM    MMMM     MM    MM           AAAAA     AA          III     NNNNN    NNNN       NN   **/
/**   MMMMM     MMMM   MM     MM          AAAAA       AA         III     NNNNN     NNNN      NN   **/
/**   MMMMM      MMMM MM      MM          AAAAAAAAAAAAAA         III     NNNNN      NNNN     NN   **/
/**   MMMMM       MMMMM       MM         AAAAA         AA        III     NNNNN       NNNN    NN   **/
/**   MMMMM        MMM        MM         AAAAA         AA        III     NNNNN        NNNN   NN   **/
/**   MMMMM                   MM        AAAAA           AA       III     NNNNN         NNNN  NN   **/
/**   MMMMM                   MM        AAAAA           AA       III     NNNNN          NNNN NN   **/
/**  MMMMMMM                 MMMM     AAAAAA            AAAA    IIIII   NNNNNN           NNNNNNN  **/
/** MMMMMMMMM               MMMMMM  AAAAAAAA           AAAAAA  IIIIIII NNNNNNN            NNNNNNN **/
/**                                                                                               **/
/***************************************************************************************************/

/***************************************************************************************************/



int main(int argc, char *argv[]) {
    /* La función IRCInterface_Run debe ser llamada al final      */
    /* del main y es la que activa el interfaz gráfico quedándose */
    /* en esta función hasta que se pulsa alguna salida del       */
    /* interfaz gráfico. 
     *                                          */
    IRCInterface_Run(argc, argv);

    return 0;
}