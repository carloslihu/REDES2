#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <netdb.h> 
#include <sys/types.h> 
#include <sys/socket.h>
#include <sys/time.h>
#include <unistd.h>
#include <pthread.h>
#include <netinet/in.h>
#include <redes2/irc.h>
#include "../includes/socket.h"
#include "../includes/commands.h"
#include "../includes/tools.h"

#define THREAD_NUMBER 10

char* hostname = "JohnTitor";
pthread_mutex_t mutex;

struct threadArgs{
	int socket;
	struct sockaddr_in *client;
	struct sockaddr_in *server;
};

typedef long int (*pFuncs)(int socket, struct sockaddr_in *client, struct sockaddr_in *server ,char* strin);
pFuncs functs[100];

void error(const char *msg)
{
    printf("%s",msg);
    exit(1);
}

int connectAndRegister(int sockfd, struct sockaddr_in *client, struct sockaddr_in *server){
	int state = 0, oSocket;
	char *command = NULL, *nickname = NULL, *username = NULL;
    char *prefix =  NULL, *msg = NULL, *modeHost = NULL, *serverOther = NULL, *realname = NULL;
    char *strPos, *myIP, *otherIP, *rpl;
	char buffer[256];
	long int retVal;

    getIP(server, &myIP);
    getIP(client, &otherIP);
	memset(buffer,0,256);

	while(state == 0){//state 0 implica esperar a recibir un par de comandos NICK USER validos
        while(nickname == NULL){//en este bucle esperaremos a que nos llegue un NICK bien formado
			memset(buffer,0,256);
            if(recv(sockfd, buffer, 255, 0) <= 0)
                return logIntError(-1, "error @ recv NICK\n");
			printf("*****************************\n%s\n*****************************\n", buffer);
            strPos = buffer;
            strPos = IRC_UnPipelineCommands(strPos, &command);
            if(IRC_CommandQuery(command) == 2){//hemos recibido un NICK
                if(IRCParse_Nick(command, &prefix, &nickname, &msg) != IRC_OK){//en caso de que no se pueda parsear bien el comando
					logVoidError("error @ connectAndRegister -> IRCParse_Nick");
                    IRC_MFree(2, &nickname, &command);
                }
            }
			else
				logVoidError("no es un mensaje NICK");
            IRC_MFree(2, &prefix, &command);
        }
        while(username == NULL){//en este bucle esperaremos a que nos llegue un USER bien formado
            if(strPos == NULL){//quiere decir que el mensaje anterior no tenia los dos comandos
				memset(buffer,0,256);
                if(recv(sockfd, (char*) buffer, 255, 0) <= 0)//asi que esperamos hasta recibir otro mensaje con otro comando
                    return logIntError(-1, "error @ recv USER");
				printf("*****************************\n%s\n*****************************\n", buffer);
                strPos = buffer;
            }
            strPos = IRC_UnPipelineCommands(strPos, &command);
            if(IRC_CommandQuery(command) == 3){//hemos recibido un USER
				//en caso de que no se pueda parsear bien el comando USER
                if(IRCParse_User(command, &prefix, &username, &modeHost, &serverOther, &realname) != IRC_OK){
					logVoidError("error @ connectAndRegister -> IRCParse_User");
                    free(username);
					username = NULL;
                }
            }
			else
				logIntError(0,"no es un mensaje USER");
            IRC_MFree(4, &command, &prefix, &modeHost, &serverOther);
        }
        //ahora que hemos recibido tanto un comando NICK como un comando USER, vamos a ver si los NICK y USER introducidos son válidos
        if(1){//TODO: poner en esta condición la función que comprueba que el NICK y el USER no están ya usados.
		//printf("username: %s\nnickname: %s\nrealname: %s\notherIP: %s\n",username,nickname,realname,otherIP);
		if((retVal = IRCTADUser_New(username, nickname, realname, NULL, SERVERNAME, otherIP, sockfd)) != IRC_OK){
			if(retVal == IRCERR_NICKUSED){
				if((retVal = IRCTADUser_Delete (0, username, nickname, realname)) != IRC_OK)
					return logIntError(retVal, "error @ connectAndRegister -> IRCTADUser_Delete");
				retVal = IRCTADUser_New(username, nickname, realname, NULL, SERVERNAME, otherIP, sockfd);
			}
			else
				return logIntError( retVal, "error @ connectAndRegister -> IRCTADUser_New\n");
		}
		IRCMsg_RplWelcome(&rpl, myIP, nickname, "msg", username, otherIP);
		send(sockfd, rpl, strlen(rpl)+1, 0);
		state = 1;
        } else {
            state = 0;
        }
        IRC_MFree(7, &nickname, &username, &msg, &realname, &rpl, &myIP, &otherIP);
	}
	return IRC_OK;
}

int retrieveMsg(int sockfd, struct sockaddr_in *server, struct sockaddr_in *client){
	char buffer[512];
	char *command = NULL;
	char *strPos;
	int byteCount;
	long int commandNumber;
	while(1)
	{
		printf("se ingresa en el bucle de retrieveMsg\n");
		memset(buffer,0,512);
		byteCount = recv(sockfd, (char*) buffer, 511, 0);
		if(byteCount == 0)
			return logIntError(0, "retrieveMsg exited");
		else if(byteCount == -1)
			return logIntError(-1, "error @ retrieveMsg -> recv");
		printf("*****************************\n%s\n*****************************\n", buffer);
		strPos = buffer;
		while(strPos != NULL)
		{
			strPos = IRC_UnPipelineCommands(strPos, &command);
			if(command != NULL)
			{
				commandNumber = IRC_CommandQuery(command);
				if(commandNumber < 0){
					if(commandDefault(sockfd, server, client, command) != IRC_OK)
						return logIntError(-1, "error @ retrieveMsg -> commandUnknown");
				}
				else if(functs[commandNumber](sockfd, server, client, command) != IRC_OK)
					return logIntError( -1, "error @ retrieveMsg -> pFuncs");
			}
			IRC_MFree(1, &command);
		}
	}
	printf("GG EZ\n");
	return IRC_OK;
}

void* threadRoutine(void* args){

	pthread_detach(pthread_self());
	if(args == NULL)
		return logPointerError(NULL,"error @ threadRoutine: NULL pointer argument");

	struct threadArgs* aux = (struct threadArgs*) args;
	int socket = aux->socket;
	struct sockaddr_in server;
	struct sockaddr_in client;

	memset(&server,0,sizeof(struct sockaddr_in));
	memset(&client,0,sizeof(struct sockaddr_in));
	memcpy(&server, aux->server, sizeof(struct sockaddr_in));
	memcpy(&client, aux->client, sizeof(struct sockaddr_in));
	pthread_mutex_unlock(&mutex);

	connectAndRegister(socket, &client, &server);
	while(retrieveMsg(socket, &server, &client) > 0);

	close(socket);
	free(args);
	return NULL;
}


int main(int argc, char *argv[])
{
	int sockfd, newsockfd, portno;
	struct sockaddr_in serv_addr, cli_addr;
	pthread_t th;
	struct threadArgs* args;

	functs[0] = commandDefault;
	functs[1] = commandDefault;
	functs[2] = commandNick;
	functs[3] = commandDefault;
	functs[4] = commandDefault;
	functs[5] = commandMode;
	functs[6] = commandDefault;
	functs[7] = commandQuit;
	functs[8] = commandDefault;
	functs[9] = commandJoin;
	functs[10] = commandPart;
	functs[11] = commandTopic;
	functs[12] = commandNames;
	functs[13] = commandList;
	functs[14] = commandDefault;
	functs[15] = commandKick;
	functs[16] = commandPrivmsg;
	functs[18] = commandMotd;
	functs[31] = commandWhois;
	functs[34] = commandPing;
	functs[37] = commandAway;
	
	//logIntError(-1, "prueba1");//unused return value -1 ERROR
	//logIntError(-2, "prueba2");//unused return value -2 ERROR_SEND
	//logIntError(-3, "prueba3");//unused return value -3 ERROR_RECV
	//logIntError(-4, "prueba4");//unused return value -4 ERROR_MALLOC
	//logIntError(-5, "prueba5");//unused return value -5 ERROR_CONTINUE

	if (argc < 2)
		portno = 6667;
    	else
		portno = atoi(argv[1]);
	if(pthread_mutex_init(&mutex, NULL))
	{
		logVoidError("error @ main -> pthread_mutex_init");
		return -1;
	}
	sockfd = openSocket_TCP();
	if(bindSocket_TCP(sockfd, portno, &serv_addr) == -1)
	{
		close(sockfd);
		exit(1);
	}
	if(listen(sockfd,50) != 0)//mark sockfd as a socket that will be used to accept incoming connection requests
		return logIntError(1,"error @ main -> listen");

	while(1)
	{
		args = (struct threadArgs*)malloc(sizeof(struct threadArgs));
		if(args == NULL)
			return logIntError(1, "error @ main -> malloc");
		pthread_mutex_lock(&mutex);
		newsockfd = acceptConnection(sockfd, &cli_addr);
		if(newsockfd == -1)
			logIntError(-1, "error @ main -> acceptConnection");
		args->socket = newsockfd;
		args->server = &serv_addr;
		args->client = &cli_addr;
		pthread_create(&th, NULL, &threadRoutine, args);
	}

	close(sockfd);
	return 0; 
}

	/*
	PREGUNTAS:
		-recv bloquea al proceso entero o solo al hilo que lo ejecuta?
		-alarm debloquearía al hilo principal del accept?

	HILO PRINCIPAL: hace hasta aqui y luego sigue con:
	while 1
		accept
		asignar_hilo
		comprobar si hacen falta mas hilos
			crear mas hilos

	RESTO DE HILOS: una vez asignados
		connectAndRegister
		while 1
			bla bla
	*/
